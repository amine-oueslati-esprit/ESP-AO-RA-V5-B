package com.example.riskassessment.Services;

import com.example.riskassessment.DAO.Entities.Vulnerability;
import com.example.riskassessment.DAO.Repositories.vulnerabilityRepo;
import com.example.riskassessment.Services.Interfaces.IVulnerabilityService;
import jakarta.persistence.EntityManager;
import jakarta.persistence.PersistenceContext;
import jakarta.transaction.Transactional;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;
import java.util.List;

@Service
@RequiredArgsConstructor
public class VulnerabilityService implements IVulnerabilityService {
    private final vulnerabilityRepo vRepo;

    @PersistenceContext
    private EntityManager entityManager;

    @Override
    @Transactional
    public Vulnerability addVulnerabilite(Vulnerability x) { return vRepo.save(x); }

    @Override
    public Vulnerability findById(long id) {
        return vRepo.findById(id).get();
    }

    @Override
    public List<Vulnerability> findAll() { return vRepo.findAll(); }

    @Override
    public void deleteVulnerabilite(long id) {
        vRepo.deleteById(id);
    }

    @Override
    public void deleteVulnerabilite(Vulnerability x) {
        vRepo.delete(x);
    }

    @Override
    public Vulnerability updateVulnerabilite(long id, Vulnerability vulnerability) {
        Vulnerability existingVulnerability = vRepo.findById(id).orElseThrow(() -> new RuntimeException("Vulnerability not found"));
        existingVulnerability.setVulnerabilityDescription(vulnerability.getVulnerabilityDescription());
        return vRepo.save(existingVulnerability);
    }
}